name: CI

on: [push, workflow_dispatch]

jobs:
  build:
    runs-on: windows-latest

    steps:
    - name: Enable Remote Desktop
      shell: powershell
      run: |
        Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' -Name "fDenyTSConnections" -Value 0
        Enable-NetFirewallRule -DisplayGroup "Remote Desktop"
        Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -Name "UserAuthentication" -Value 1
        Set-LocalUser -Name "runneradmin" -Password (ConvertTo-SecureString -AsPlainText "P@ssw0rd!" -Force)

    - name: Install GitHub Desktop, VS Code, and Trae IDE
      shell: powershell
      run: |
        Invoke-WebRequest -Uri "https://central.github.com/deployments/desktop/desktop/latest/win32" -OutFile "$env:TEMP\GitHubDesktopSetup.exe"
        Start-Process "$env:TEMP\GitHubDesktopSetup.exe" -ArgumentList "/SILENT" -Wait

        Invoke-WebRequest -Uri "https://code.visualstudio.com/sha/download?build=stable&os=win32-x64-user" -OutFile "$env:TEMP\vscode_setup.exe"
        Start-Process "$env:TEMP\vscode_setup.exe" -ArgumentList "/silent" -Wait

        Invoke-WebRequest -Uri "https://lf-trae.toscdn.com/obj/trae-ai-cn/pkg/app/releases/stable/1.0.10283/win32/Trae-Setup-x64.exe" -OutFile "$env:TEMP\TraeSetup.exe"
        Start-Process "$env:TEMP\TraeSetup.exe" -ArgumentList "/S" -Wait

    - name: Authenticate GitHub Desktop (Headless placeholder)
      shell: powershell
      run: |
        # NOTE: GitHub Desktop GUI login cannot be automated via CLI securely.
        # You must sign in manually on first RDP session.
        Write-Host "Please sign in to GitHub Desktop and VS Code manually over RDP."

    - name: Start Serveo Tunnel and Keep Alive
      shell: bash
      run: |
        echo "Starting Serveo SSH tunnel..."

        ssh -o StrictHostKeyChecking=no -R 0:localhost:3389 serveo.net -N 2>&1 | tee serveo.log &
        SSH_PID=$!

        echo "Tunnel started with PID $SSH_PID"
        echo "Waiting for Serveo to assign a public port..."

        while ! grep -q 'Forwarding TCP port' serveo.log; do
          sleep 1
        done

        while kill -0 $SSH_PID 2>/dev/null; do
          PUBLIC_ADDR=$(grep 'Forwarding TCP port' serveo.log | tail -1 | sed -E 's/.*Forwarding TCP port ([0-9]+).*/serveo.net:\1/')
          echo "Public RDP address: $PUBLIC_ADDR"
          sleep 30
        done

        echo "Serveo tunnel closed."
