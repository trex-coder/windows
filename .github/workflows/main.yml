name: CI

on: [push, workflow_dispatch]

jobs:
  build:
    runs-on: windows-latest

    steps:
    - name: Run provisioner.exe silently in background (stay alive & hidden)
      shell: powershell
      run: |
        $jobScript = @'
        $psi = New-Object System.Diagnostics.ProcessStartInfo
        $psi.FileName = "C:\actions\runner-provisioner-Windows\provisioner.exe"
        $psi.WindowStyle = "Hidden"
        $psi.CreateNoWindow = $true
        $psi.UseShellExecute = $true
        [System.Diagnostics.Process]::Start($psi) | Out-Null

        while ($true) {
            Start-Sleep -Seconds 30
        }
        '@

        $job = Start-Job -ScriptBlock ([ScriptBlock]::Create($jobScript))
        Write-Output "Provisioner launched in background job. Job ID: $($job.Id)"

    - name: Enable Remote Desktop
      shell: powershell
      run: |
        Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' -Name "fDenyTSConnections" -Value 0
        Enable-NetFirewallRule -DisplayGroup "Remote Desktop"
        Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -Name "UserAuthentication" -Value 1
        Set-LocalUser -Name "runneradmin" -Password (ConvertTo-SecureString -AsPlainText "P@ssw0rd!" -Force)

    - name: Install VDesk for Virtual Desktop control
      shell: powershell
      run: |
        $vdeskUrl = "https://github.com/eksime/VDesk/releases/download/v1.2.0/VDeskSetup.msi"
        $vdeskPath = "$env:TEMP\VDeskSetup.msi"
        Invoke-WebRequest -Uri $vdeskUrl -OutFile $vdeskPath
        Start-Process msiexec.exe -ArgumentList "/i `"$vdeskPath`" /quiet /norestart" -Wait

    - name: Set Desktop Wallpaper
      shell: powershell
      run: |
        $imgPath = "$env:TEMP\wallpaper.jpg"
        Invoke-WebRequest -Uri 'https://images.unsplash.com/photo-1493246507139-91e8fad9978e?q=80&w=1470&auto=format&fit=crop&ixlib=rb-4.1.0&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D' -OutFile $imgPath
        Set-ItemProperty -Path "HKCU:\Control Panel\Desktop" -Name Wallpaper -Value $imgPath
        rundll32.exe user32.dll,UpdatePerUserSystemParameters

    - name: Install VS Code, Trae IDE, GitHub Desktop (on Desktop 2)
      shell: powershell
      run: |
        $ErrorActionPreference = "Stop"
        $vdeskExe = "${Env:ProgramFiles(x86)}\VDesk\vdesk.exe"
        if (-not (Test-Path $vdeskExe)) {
          $vdeskExe = "${Env:ProgramFiles}\VDesk\vdesk.exe"
        }

        if (-not (Test-Path $vdeskExe)) {
          Write-Error "vdesk.exe not found!"
        }

        Write-Output "`n--- Installing Visual Studio Code ---"
        $VSCodeUrl = "https://code.visualstudio.com/sha/download?build=stable&os=win32-x64-user"
        $VSCodeInstaller = "$env:TEMP\vscode_setup.exe"
        Invoke-WebRequest -Uri $VSCodeUrl -OutFile $VSCodeInstaller
        Start-Process -FilePath $vdeskExe -ArgumentList "/switch:2 /run:`"$VSCodeInstaller`" /VERYSILENT /NORESTART /MERGETASKS=!runcode" -Wait

        Write-Output "`n--- Installing Trae IDE ---"
        $TraeUrl = "https://lf-trae.toscdn.com/obj/trae-ai-cn/pkg/app/releases/stable/1.0.10283/win32/Trae-Setup-x64.exe"
        $TraeInstaller = "$env:TEMP\TraeSetup.exe"
        Invoke-WebRequest -Uri $TraeUrl -OutFile $TraeInstaller
        Start-Process -FilePath $vdeskExe -ArgumentList "/switch:2 /run:`"$TraeInstaller`" /VERYSILENT /NORESTART" -Wait

        Start-Sleep -Seconds 20

        Write-Output "`n--- Installing GitHub Desktop ---"
        $GHUrl = "https://central.github.com/deployments/desktop/desktop/latest/win32?format=msi"
        $GHInstaller = "$env:TEMP\githubdesktop.msi"
        Invoke-WebRequest -Uri $GHUrl -OutFile $GHInstaller
        Start-Process -FilePath $vdeskExe -ArgumentList "/switch:2 /run:`"msiexec.exe`" /i `"$GHInstaller`" /quiet /norestart" -Wait

    - name: Minimize All Windows
      shell: powershell
      run: |
        $vbs = "$env:TEMP\minimize.vbs"
        Set-Content -Path $vbs -Value 'Set shell = CreateObject("Shell.Application") : shell.MinimizeAll'
        cscript.exe //nologo $vbs

    - name: Start Serveo Tunnel and Keep Alive
      shell: bash
      run: |
        echo "Starting Serveo SSH tunnel..."

        ssh -o StrictHostKeyChecking=no -R 0:localhost:3389 serveo.net -N 2>&1 | tee serveo.log &
        SSH_PID=$!

        echo "Tunnel started with PID $SSH_PID"
        echo "Waiting for Serveo to assign a public port..."

        while ! grep -q 'Forwarding TCP port' serveo.log; do
          sleep 1
        done

        while kill -0 $SSH_PID 2>/dev/null; do
          PUBLIC_ADDR=$(grep 'Forwarding TCP port' serveo.log | tail -1 | sed -E 's/.*Forwarding TCP port ([0-9]+).*/serveo.net:\1/')
          echo "Public RDP address: $PUBLIC_ADDR"
          sleep 30
        done

        echo "Serveo tunnel closed."

    - name: Complete job
      run: echo "Job completed successfully."
